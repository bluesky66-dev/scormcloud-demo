{"version":3,"sources":["serviceWorker.js","components/Greet.js","components/Welcome.js","components/ScormLogin.js","App.js","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","Greet","Welcome","Component","ScormLogin","state","message","SCORMCloud","authPing","error","result","console","log","this","setState","onClick","changeMessage","App","className","global","Buffer","URL","URLSearchParams","ReactDOM","render","document","getElementById","module","exports"],"mappings":"kHAAA,kCAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8GC,SAASC,IACV,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaL,kB,sDChIJM,G,cADD,kBAAM,8C,wCCMLC,E,iLAJX,OAAO,qD,GAFWC,a,kBCgCPC,E,YA3Bf,aACC,IAAD,8BACI,+CACKC,MAAQ,CACVC,QAAQ,mBAHf,E,6EAQc,IAAIC,IAAW,aAAc,4CACnCC,UAAS,SAAUC,EAAOC,GAC1B,GAAID,EAAO,MAAMA,EAAOE,QAAQC,IAAIF,MAExCG,KAAKC,SAAS,CACVR,QAAQ,iC,+BAIP,IAAD,OACR,OACI,uCACO,4BAAKO,KAAKR,MAAMC,SACvB,4BAAQS,QAAS,kBAAM,EAAKC,kBAA5B,c,GAzBqBb,aCaVc,IAVf,WACE,OACE,yBAAKC,UAAU,OACnB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,S,uECZA,6GASAC,EAAOC,OAASA,IAChBD,EAAOE,IAAMA,MACbF,EAAOG,gBAAkBA,kBAEzBC,IAASC,OAAO,kBAAC,IAAD,MAASC,SAASC,eAAe,SAKjD7B,O,2DClBA8B,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.7e25feea.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\n\r\nconst Greet = () => <h1>Hello Rashid</h1>\r\nexport default Greet","import React, {Component} from 'react'\r\n\r\nclass Welcome extends Component{\r\nrender(){\r\n    return <h1>Hello Rashid Aziz</h1>\r\n   }\r\n} \r\n\r\nexport default Welcome;","import React, {Component} from 'react'\r\nimport SCORMCloud from 'scormcloud-api-wrapper'\r\n\r\n\r\nclass ScormLogin extends Component{\r\n\r\n// Import the module.\r\nconstructor()\r\n{\r\n    super()\r\n    this.state = {\r\n       message:'Welcome Visitor'\r\n    }\r\n}\r\n\r\nchangeMessage(){\r\n    var api = new SCORMCloud('8Z11RVXG0P', '3SJ7eciCg0e7fy0X8BDLlb16EgUJf4hikREbMJVv');\r\n    api.authPing(function (error, result) {\r\n        if (error) throw error; console.log(result);\r\n      });\r\n    this.setState({\r\n        message:'Thanks you for subscribing'\r\n    })\r\n}\r\n\r\nrender(){\r\nreturn(\r\n    <div>\r\n    return <h1>{this.state.message}</h1>\r\n    <button onClick={() => this.changeMessage()}>Login</button>\r\n    </div>\r\n    )\r\n   }\r\n}\r\nexport default ScormLogin;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Greet from './components/Greet'\nimport Welcome from './components/Welcome'\nimport ScormLogin from './components/ScormLogin'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n<Greet></Greet>\n<Welcome></Welcome>\n<ScormLogin></ScormLogin>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// see https://github.com/facebook/react-native/issues/14796\nimport Buffer from 'buffer';\nimport { URL, URLSearchParams } from 'url';\n\nglobal.Buffer = Buffer;\nglobal.URL = URL;\nglobal.URLSearchParams = URLSearchParams;\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}